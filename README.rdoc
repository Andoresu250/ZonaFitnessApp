= \README

Antes que nada:

- bundle install 
- rake db:migrate

== Update Permisos de usuarios (V4.0)

	Exiten 4 tipos de usuarios: normal, instructor, admin y super admin; Para cada uno de estos tipos existe una funcion que verifica a cual o cuales pertenece.

La convencion es:

- Usuario normal: 1
- Profesor: >= 2
- Admin: >=3
- Super Admin: 4

NOTA: Creo que se puede presentar el caso de que un admin o super admin sea profesor como lo es el hermano de Yesid, ese es el porque de la convencion.

Funciones:

- is_normal_user?
- is_trainer?
- is_admin?
- is_super_admin?
		

Estas son funciones booleanas que se aplican sobre un "User".

Ejemplo:

- current_user.is_admin? 

current_user es una variable que almacena el usuario actualmente logueado..

Ejemplo(Consola de rails):

- User.where(cc: 1140876239).is_super_admin?

COMO DAR PERMISOS MANUALMETE(desde la consola de rails):

- User.where(:cc => 1140876239).update_all(:permission_level => 4)

Otras Funciones(Controladores):

- authenticate_normal_user!
- authenticate_trainer!
- authenticate_admin!
- authenticate_super_admin!

Metodos creados para la validacion de los permisos en los CallBacks.

Ejemplo:

- before_action :authenticate_normal_user!, only [:index,:edit,:delete,:new]

Este seria un ejemplo de CallBack para el controlador de las clases.


== Update Maquina de estado para stado de usuarios (V4.1)

	Existen 2 tipos de usuarios "activos" y "desactivados".

	Los metodos para realizar estas acciones son(Por consola):

	-User.where(:cc => 1140876239).first.activar! (para activar un usuario y guardar el cambio)
	-User.where(:cc => 1140876239).first.desactivar! (para desactivar un usuario y guardar el cambio)

	Tambien hay 2 metodos para validar el estado del usuario (Boleano)

	-User.where(:cc => 1140876239).first.may_activar? (Si el usuario esta desactivado retornara true)
	-User.where(:cc => 1140876239).first.may_desactivar? (Si el usuario esta activado retornara true)